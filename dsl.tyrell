# First, specify the types that will be used
enum Const {
  "const"
}

value Table {
  col: int;
  row: int;
  groups: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Morpheus(Table) -> Table;

# Finally, specify the production rules
func empty: Empty -> Empty;


func summarise: Table r -> Table a, Const b, Const c {
  row(r) <= row(a);
  col(r) <= col(a) + 1;
  groups(r) <= groups(a);
}

func group_by: Table r -> Table a, Const b {
  row(r) == row(a);
  col(r) == col(a);
  groups(r) < groups(a);
}

func count: Table r -> Table a {
  row(r) <= row(a);
  col(r) <= col(a) + 1;
  groups(r) <= groups(a);
}

func top_n: Table r -> Table a, Const b, Const c {
  row(r) <= row(a);
}







#Hard constraints
predicate enforce_sequence(summarise, group_by); # summarize => group_by
predicate enforce_sequence(count, group_by); # count => group_by
# group_by => summarize or count



predicate order_restriction(top_n, count);
predicate order_restriction(top_n, summarise);
# top_n => count or summarize



