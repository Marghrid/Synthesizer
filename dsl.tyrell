# First, specify the types that will be used
enum Const {
  "const"
}

value Table {
  col: int;
  row: int;
  groups: int;
}

value Empty;

# Next, specify the input/output of the synthesized program
program Morpheus(Table) -> Table;

# Finally, specify the production rules
func empty: Empty -> Empty;


func summarise: Table r -> Table a, Const b, Const c {
  col(r) <= col(a);
  row(r) == groups(a);
  groups(r) == groups(a);
}

func group_by: Table r -> Table a, Const b {
  col(r) == col(a);
  row(r) == row(a);
  groups(r) < groups(a);
}

func count: Table r -> Table a {
  col(r) <= col(a);
  row(r) == groups(a);
  groups(r) == groups(a);
}

func top_n: Table r -> Table a, Const b, Const c {
  col(r) == col(a);
  row(r) <= row(a);
  groups(r) <= groups(a);
}

func bottom_n: Table r -> Table a, Const b, Const c {
  col(r) == col(a);
  row(r) <= row(a);
  groups(r) <= groups(a);
}

func plain_top_n: Table r -> Table a, Const b, Const c {
  col(r) == col(a);
  row(r) < row(a);
  groups(r) < groups(a);
}

func mutate: Table r -> Table a, Const b, Const c, Const d {
  col(r) >= col(a);
  row(r) == row(a);
  groups(r) == groups(a);
}

func filter: Table r -> Table a, Const b, Const c {
  col(r) == col(a);
  row(r) < row(a);
  groups(r) <= groups(a);
}

func gather: Table r -> Table a {
  col(r) < col(a);
  row(r) > row(a);
  groups(r) > groups(a);
}



#Hard constraints


predicate sequence(summarise, group_by); # summarize => group_by
predicate sequence(count, group_by); # count => group_by
                                     # group_by => summarize or count

predicate order_restriction(top_n, count); # top_n => count or summarize or mutate
predicate order_restriction(top_n, summarise); # top_n => count or summarize or mutate
predicate order_restriction(top_n, mutate); # top_n => count or summarize or mutate

predicate order_restriction(plain_top_n, count); # plain_top_n => count or summarize or mutate
predicate order_restriction(plain_top_n, summarise); # plain_top_n => count or summarize or mutate
predicate order_restriction(plain_top_n, mutate); # plain_top_n => count or summarize or mutate

predicate order_restriction(bottom_n, count); # bottom_n => count or summarize or mutate
predicate order_restriction(bottom_n, summarise); # bottom_n => count or summarize or mutate
predicate order_restriction(bottom_n, mutate); # bottom_n => count or summarize or mutate

predicate only_at_root(top_n);
predicate only_at_root(bottom_n);
predicate only_at_root(plain_top_n);

predicate must_occur(group_by);
